{"paragraphs":[{"text":"%md\n## Some helper functions\n","user":"anonymous","dateUpdated":"2017-03-04T22:15:43+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488631624596_2142451262","id":"20170304-134704_821479177","dateCreated":"2017-03-04T13:47:04+0100","dateStarted":"2017-03-04T22:15:43+0100","dateFinished":"2017-03-04T22:15:43+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6246","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Some helper functions</h2>\n</div>"}]}},{"text":"%pyspark\ndef display(html):\n    print(\"%angular\")\n    print(html)\n\ndef getNoteId():\n    return z.z.getInterpreterContext().getNoteId()\n\ndef getParagraphId():\n    return z.z.getInterpreterContext().getParagraphId()\n\n","user":"anonymous","dateUpdated":"2017-03-04T22:16:53+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488626316110_1749625400","id":"20170304-121836_865067366","dateCreated":"2017-03-04T12:18:36+0100","dateStarted":"2017-03-04T22:16:53+0100","dateFinished":"2017-03-04T22:16:53+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6247","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\nprint(\"Note Id:     \", getNoteId())\nprint(\"Paragraph Id:\", getParagraphId())\n","user":"anonymous","dateUpdated":"2017-03-04T22:16:55+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488657679260_-1916614642","id":"20170304-210119_1421749066","dateCreated":"2017-03-04T21:01:19+0100","dateStarted":"2017-03-04T22:16:55+0100","dateFinished":"2017-03-04T22:16:55+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6248","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Note Id:      2C9U3F8H6\nParagraph Id: 20170304-210119_1421749066\n"}]}},{"text":"%pyspark\nprint(\"Note Id:     \", getNoteId())\nprint(\"Paragraph Id:\", getParagraphId())\n","user":"anonymous","dateUpdated":"2017-03-04T22:16:57+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488657756428_389108896","id":"20170304-210236_2061754981","dateCreated":"2017-03-04T21:02:36+0100","dateStarted":"2017-03-04T22:16:57+0100","dateFinished":"2017-03-04T22:16:57+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6249","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Note Id:      2C9U3F8H6\nParagraph Id: 20170304-210236_2061754981\n"}]}},{"text":"%pyspark\ndisplay(\"<b>Hello Zeppelin</b>\")\n","user":"anonymous","dateUpdated":"2017-03-04T22:17:00+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488657759503_783476518","id":"20170304-210239_1540885795","dateCreated":"2017-03-04T21:02:39+0100","dateStarted":"2017-03-04T22:17:00+0100","dateFinished":"2017-03-04T22:17:00+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6250","results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<b>Hello Zeppelin</b>\n"}]}},{"text":"%md\n## How to trigger simple Javascript functions: DOM buttons","user":"anonymous","dateUpdated":"2017-03-04T22:15:47+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488631639199_-1918021709","id":"20170304-134719_1079301993","dateCreated":"2017-03-04T13:47:19+0100","dateStarted":"2017-03-04T22:15:47+0100","dateFinished":"2017-03-04T22:15:47+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6251","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>How to trigger simple Javascript functions: DOM buttons</h2>\n</div>"}]}},{"text":"%pyspark\n\ndisplay(\"\"\"<button id=\"abcde\" ng-click=\"run = run + 1\">Click {{run}}</button>\"\"\")\n\nsetVar(\"run\", 0)","user":"anonymous","dateUpdated":"2017-03-04T22:17:02+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488626500240_1790468436","id":"20170304-122140_404002024","dateCreated":"2017-03-04T12:21:40+0100","dateStarted":"2017-03-04T22:17:02+0100","dateFinished":"2017-03-04T22:17:02+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6252","results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<button id=\"abcde\" ng-click=\"run = run + 1\">Click {{run}}</button>\n"}]}},{"text":"%md\n## How to trigger Javascript functions: A custom watcher\n\nClicking on some DOM button is sometimes OK, however it would be great to have a way to trigger Javascript functions from Python.\n\nSo let's use the capabilities of `z.z.angularBind`, `z.z.angularUnbind` and `z.z.angular` together with `$scope.$watch` (the Angular way to trigger javascript functions based on changed variables)","user":"anonymous","dateUpdated":"2017-03-04T22:17:05+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488631734857_1429263074","id":"20170304-134854_1991643647","dateCreated":"2017-03-04T13:48:54+0100","dateStarted":"2017-03-04T22:17:05+0100","dateFinished":"2017-03-04T22:17:05+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6253","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>How to trigger Javascript functions: A custom watcher</h2>\n<p>Clicking on some DOM button is sometimes OK, however it would be great to have a way to trigger Javascript functions from Python.</p>\n<p>So let&rsquo;s use the capabilities of <code>z.z.angularBind</code>, <code>z.z.angularUnbind</code> and <code>z.z.angular</code> together with <code>$scope.$watch</code> (the Angular way to trigger javascript functions based on changed variables)</p>\n</div>"}]}},{"text":"%pyspark\nfrom uuid import uuid4\nimport time\n\nINIT_TMPL = \"\"\"\n<script>\n    var sessionCommVar = \"%s\";\n    var sessionCommDivId = \"%s\"\n    var execution_id = \"%s\"                                                // Avoid double execution\n    if(window.__zeppelin_already_executed__ == null) {                     //\n        window.__zeppelin_already_executed__ = [];                         //\n    }                                                                      //\n    if(!window.__zeppelin_already_executed__.includes(execution_id)) {     // Avoid double execution\n\n        // Get the angular scope of the session div element\n        console.log(\"Get scope for div id \" + sessionCommDivId);\n        var $scope = angular.element(document.getElementById(sessionCommDivId)).scope();\n\n        // Remove any remaining watcher from last session\n        if(typeof(window.__zeppelin_notebook_unwatchers__) !== \"undefined\") {\n            console.info(\"ZeppelinSession: Cancel watchers\");\n            var unwatchers = window.__zeppelin_notebook_unwatchers__\n            for(i in unwatchers) {\n                unwatchers[i]();\n            }\n        }\n        \n        // Array to note all active watchers (as with their respective unwatcher function)\n        window.__zeppelin_notebook_unwatchers__ = [];\n        \n        // make scope easily accessible in Web Console\n        window.__zeppelin_comm_scope = $scope;\n\n        console.info(\"Install Angular watcher for session comm var \" + sessionCommVar);\n        var unwatch = $scope.$watch(sessionCommVar, function(newValue, oldValue, scope) {\n            \n            // The global message handler\n            \n            if(typeof(newValue) !== \"undefined\") {\n\n                if (newValue.task === \"call\") {\n\n                    // Format: newValue = {\"id\": int, task\":\"call\", \"msg\":{\"function\":\"func_name\", \"object\":\"json_string\"}}\n                    \n                    var data = newValue.msg;\n                    if (typeof($scope.__functions[data.function]) === \"function\") {\n                        $scope.__functions[data.function]($scope, data.object);\n                    } else {\n                        alert(\"Unknown function: \" + data.function + \"()\")\n                    }\n                    \n                } else if (newValue.task === \"register\") {\n                    \n                    // Format: newValue = {\"id\": int, task\":\"register\", \"msg\":{\"function\":\"func_name\", \"funcBody\":\"function_as_string\"}}\n                    \n                    var data = newValue.msg;\n                    var func = eval(data.funcBody);\n                    $scope.__functions[data.function] = func;\n                    \n                } else if (newValue.task === \"unregister\") {\n                    \n                    // Format: newValue = {\"id\": int, task\":\"unregister\", \"msg\":{\"function\":\"func_name\"}}\n                    \n                    var data = newValue.msg;\n                    if (typeof($scope.__functions[data.function]) === \"function\") {\n                        delete $scope.__functions[data.function];\n                    }               \n                    \n                } else if (newValue.task === \"dump\") {\n                    \n                    // Format: newValue = {\"id\": int, task\":\"dump\", \"msg\":{}}\n                    \n                    console.log(\"sessionCommDivId: \", sessionCommDivId);\n                    console.log(\"$scope: \", $scope);\n                    \n                } else {\n                    alert(\"Unknown task: \" + JSON.stringify(newValue));\n                }\n            }\n        }, true)\n        \n        // Initialize the object that will hold the registered functions\n        $scope.__functions = {};\n        \n        // remember unwatch function to clean up later\n        window.__zeppelin_notebook_unwatchers__.push(unwatch)\n        \n        // mark init as executed\n        window.__zeppelin_already_executed__.push(execution_id);            // Avoid double execution\n    } else {                                                                //\n        console.info(\"Angular script already executed, skipped\");           //\n    }                                                                       // Avoid double execution\n</script>\n\"\"\"\n\n\nclass ZeppelinSession:\n\n    def __init__(self, zeppelinContext, delay=0.1):\n        self.id = 0\n        self.delay = delay\n        self.zeppelinContext = zeppelinContext\n\n    def sessionVars(self, all=True):\n        noteId = self.zeppelinContext.getInterpreterContext().getNoteId()\n        sessionCommVar = \"__zeppelin_comm_%s_msg__\" % noteId\n        if all:\n            sessionCommDivId = \"__Zeppelin_Session_%s_Comm__\" % noteId\n            sessionStatusVar = \"__zeppelin_comm_%s_status__\" % noteId\n            return (sessionCommDivId, sessionCommVar, sessionStatusVar)\n        else:\n            return sessionCommVar\n\n    def init(self, jsScript=None):\n        sessionCommDivId, sessionCommVar, sessionStatusVar = self.sessionVars(all=True)\n        self.zeppelinContext.angularUnbind(sessionCommVar)\n        self.zeppelinContext.angularUnbind(sessionStatusVar)\n\n        # div must exist before javascript below can be printed\n        print(\"%angular\")\n        if jsScript:\n            print(\"\"\"<script>{{%s}}</script>\\n\"\"\" % jsScript)\n        print(\"\"\"<div id=\"%s\">{{%s}}</div>\\n\"\"\" % (sessionCommDivId, sessionStatusVar))\n        self.zeppelinContext.angularBind(sessionStatusVar, \"Session initialized, can now be started in the next paragraph ...  (do not delete this paragraph)\")\n\n    def start(self):\n        sessionCommDivId, sessionCommVar, sessionStatusVar = self.sessionVars(all=True)\n\n        self.zeppelinContext.angularBind(sessionStatusVar, \"ZeppelinSession started (do not delete this paragraph)\")\n        print(\"%angular\") \n        print(INIT_TMPL % (sessionCommVar, sessionCommDivId, str(uuid4())))\n        \n    def send(self, task, msg):\n        sessionCommVar = self.sessionVars(all=False)\n        self.id += 1 # ensure every message is different\n        self.zeppelinContext.angularBind(sessionCommVar, {\"id\": self.id, \"task\":task, \"msg\":msg})\n    \n    def registerFunction(self, funcName, jsFunc):\n        self.send(\"register\", {\"function\": funcName, \"funcBody\": jsFunc})\n    \n    def unregisterFunction(self, funcName):\n        self.send(\"unregister\", {\"function\": funcName})\n\n    def call(self, funcName, object):\n        self.send(\"call\", {\"function\": funcName, \"object\": object})\n        \n    def set(self, var, value):\n        self.zeppelinContext.angularBind(var, value)\n        \n    def get(self, var, delay=0.2):\n        time.sleep(delay)\n        return self.zeppelinContext.angular(var)\n        \n    def delete(self, var):\n        self.zeppelinContext.angularUnbind(var)\n        \n    def dumpScope(self):\n        self.send(\"dump\", {})\n        \n    \n","user":"anonymous","dateUpdated":"2017-03-04T22:17:07+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","lineNumbers":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488631790479_1123649854","id":"20170304-134950_918281422","dateCreated":"2017-03-04T13:49:50+0100","dateStarted":"2017-03-04T22:17:07+0100","dateFinished":"2017-03-04T22:17:07+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6254","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n**Note:** All variables and functions created by the methods of this class are bound to the paragraph that executes the `init` method. So don't mix it up with `z.z.angularBind` / `z.z.angularUnbind`\n","user":"anonymous","dateUpdated":"2017-03-04T22:17:11+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488660949970_541753812","id":"20170304-215549_2111036395","dateCreated":"2017-03-04T21:55:49+0100","dateStarted":"2017-03-04T22:17:11+0100","dateFinished":"2017-03-04T22:17:11+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6255","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Note:</strong> All variables and functions created by the methods of this class are bound to the paragraph that executes the <code>init</code> method. So don&rsquo;t mix it up with <code>z.z.angularBind</code> / <code>z.z.angularUnbind</code></p>\n</div>"}]}},{"title":"Create a new session","text":"%pyspark\n\nsession = ZeppelinSession(z.z)\nsession.init()\n","user":"anonymous","dateUpdated":"2017-03-04T22:17:12+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488631833317_80488316","id":"20170304-135033_419842332","dateCreated":"2017-03-04T13:50:33+0100","dateStarted":"2017-03-04T22:17:12+0100","dateFinished":"2017-03-04T22:17:12+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6256","results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<div id=\"__Zeppelin_Session_2C9U3F8H6_Comm__\">{{__zeppelin_comm_2C9U3F8H6_status__}}</div>\n\n"}]}},{"title":"Start the session (means start Angular watching)","text":"%pyspark\nsession.start()","user":"anonymous","dateUpdated":"2017-03-04T22:17:15+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488641227462_-117879678","id":"20170304-162707_558911560","dateCreated":"2017-03-04T16:27:07+0100","dateStarted":"2017-03-04T22:17:15+0100","dateFinished":"2017-03-04T22:17:15+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6257","results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"\n<script>\n    var sessionCommVar = \"__zeppelin_comm_2C9U3F8H6_msg__\";\n    var sessionCommDivId = \"__Zeppelin_Session_2C9U3F8H6_Comm__\"\n    var execution_id = \"889ae49f-6c64-49b4-b8d3-b5533e23f33c\"                                                // Avoid double execution\n    if(window.__zeppelin_already_executed__ == null) {                     //\n        window.__zeppelin_already_executed__ = [];                         //\n    }                                                                      //\n    if(!window.__zeppelin_already_executed__.includes(execution_id)) {     // Avoid double execution\n        // Get the angular scope of the session div element\n        console.log(\"Get scope for div id \" + sessionCommDivId);\n        var $scope = angular.element(document.getElementById(sessionCommDivId)).scope();\n        // Remove any remaining watcher from last session\n        if(typeof(window.__zeppelin_notebook_unwatchers__) !== \"undefined\") {\n            console.info(\"ZeppelinSession: Cancel watchers\");\n            var unwatchers = window.__zeppelin_notebook_unwatchers__\n            for(i in unwatchers) {\n                unwatchers[i]();\n            }\n        }\n        // Array to note all active watchers (as with their respective unwatcher function)\n        window.__zeppelin_notebook_unwatchers__ = [];\n        // make scope easily accessible in Web Console\n        window.__zeppelin_comm_scope = $scope;\n        console.info(\"Install Angular watcher for session comm var \" + sessionCommVar);\n        var unwatch = $scope.$watch(sessionCommVar, function(newValue, oldValue, scope) {\n            // The global message handler\n            if(typeof(newValue) !== \"undefined\") {\n                if (newValue.task === \"call\") {\n                    // Format: newValue = {\"id\": int, task\":\"call\", \"msg\":{\"function\":\"func_name\", \"object\":\"json_string\"}}\n                    var data = newValue.msg;\n                    if (typeof($scope.__functions[data.function]) === \"function\") {\n                        $scope.__functions[data.function]($scope, data.object);\n                    } else {\n                        alert(\"Unknown function: \" + data.function + \"()\")\n                    }\n                } else if (newValue.task === \"register\") {\n                    // Format: newValue = {\"id\": int, task\":\"register\", \"msg\":{\"function\":\"func_name\", \"funcBody\":\"function_as_string\"}}\n                    var data = newValue.msg;\n                    var func = eval(data.funcBody);\n                    $scope.__functions[data.function] = func;\n                } else if (newValue.task === \"unregister\") {\n                    // Format: newValue = {\"id\": int, task\":\"unregister\", \"msg\":{\"function\":\"func_name\"}}\n                    var data = newValue.msg;\n                    if (typeof($scope.__functions[data.function]) === \"function\") {\n                        delete $scope.__functions[data.function];\n                    }               \n                } else if (newValue.task === \"dump\") {\n                    // Format: newValue = {\"id\": int, task\":\"dump\", \"msg\":{}}\n                    console.log(\"sessionCommDivId: \", sessionCommDivId);\n                    console.log(\"$scope: \", $scope);\n                } else {\n                    alert(\"Unknown task: \" + JSON.stringify(newValue));\n                }\n            }\n        }, true)\n        // Initialize the object that will hold the registered functions\n        $scope.__functions = {};\n        // remember unwatch function to clean up later\n        window.__zeppelin_notebook_unwatchers__.push(unwatch)\n        // mark init as executed\n        window.__zeppelin_already_executed__.push(execution_id);            // Avoid double execution\n    } else {                                                                //\n        console.info(\"Angular script already executed, skipped\");           //\n    }                                                                       // Avoid double execution\n</script>\n\n"}]}},{"title":"Set and get Javascript variables from python","text":"%pyspark\nsession.set(\"myvar\", 10)\nsession.get(\"myvar\")","user":"anonymous","dateUpdated":"2017-03-04T22:17:18+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488643455064_-290970482","id":"20170304-170415_475929524","dateCreated":"2017-03-04T17:04:15+0100","dateStarted":"2017-03-04T22:17:18+0100","dateFinished":"2017-03-04T22:17:18+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6258","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"10\n"}]}},{"text":"%md\n**Note:**\nAngular calls are async. This can't be controlled from Python, so `session.get` my be called \"too early\", i.e. before Angular has finished its `$apply()` call.\n\nThat's why `session.get` has an additional parameter `delay` (default 200ms) to give Angular a chance to finish. \n\nExample: `session.get(\"myvar\", 0.5)` for 500ms\n","user":"anonymous","dateUpdated":"2017-03-04T22:16:02+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488661458520_-1568870861","id":"20170304-220418_1112986702","dateCreated":"2017-03-04T22:04:18+0100","dateStarted":"2017-03-04T22:16:02+0100","dateFinished":"2017-03-04T22:16:02+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6259","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Note:</strong><br/>Angular calls are async. This can&rsquo;t be controlled from Python, so <code>session.get</code> my be called &ldquo;too early&rdquo;, i.e. before Angular has finished its <code>$apply()</code> call.</p>\n<p>That&rsquo;s why <code>session.get</code> has an additional parameter <code>delay</code> (default 200ms) to give Angular a chance to finish. </p>\n<p>Example: <code>session.get(&quot;myvar&quot;, 0.5)</code> for 500ms</p>\n</div>"}]}},{"title":"Registering a javascript function","text":"%md\n\n- session: All variables created via the ZeppelinSession class can be accessed via the `scope` parameter (which actually is $scope of the Zeppelin Session DIV element)\n- object: The `object`parameter can be defined as needed and has to be in sync with the parameter given in `session.call`\n","user":"anonymous","dateUpdated":"2017-03-04T22:12:51+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488661674149_1420333645","id":"20170304-220754_1672058172","dateCreated":"2017-03-04T22:07:54+0100","dateStarted":"2017-03-04T22:12:47+0100","dateFinished":"2017-03-04T22:12:47+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6260"},{"text":"%pyspark\n\njsFunc = \"\"\"\nincrement = function(session, object) {\n    session.myvar +=  object.inc\n}\n\"\"\"\nsession.registerFunction(\"increment\", jsFunc)\n","user":"anonymous","dateUpdated":"2017-03-04T22:17:23+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488644055021_-22156883","id":"20170304-171415_409342668","dateCreated":"2017-03-04T17:14:15+0100","dateStarted":"2017-03-04T22:17:23+0100","dateFinished":"2017-03-04T22:17:23+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6261","results":{"code":"SUCCESS","msg":[]}},{"title":"Calling the registered function","text":"%pyspark\nsession.call(\"increment\", {\"inc\":32})\n\n# Remember: async call above, so result might be outdated!\n\nsession.get(\"myvar\")","user":"anonymous","dateUpdated":"2017-03-04T22:17:26+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488645725472_-799342559","id":"20170304-174205_174725544","dateCreated":"2017-03-04T17:42:05+0100","dateStarted":"2017-03-04T22:17:26+0100","dateFinished":"2017-03-04T22:17:26+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6262","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"42\n"}]}},{"text":"%pyspark\nsession.get(\"myvar\")","user":"anonymous","dateUpdated":"2017-03-04T22:17:29+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488652566824_-619874502","id":"20170304-193606_525420534","dateCreated":"2017-03-04T19:36:06+0100","dateStarted":"2017-03-04T22:17:29+0100","dateFinished":"2017-03-04T22:17:29+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6263","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"42\n"}]}},{"title":"Finally unregister the function again","text":"%pyspark\nsession.unregisterFunction(\"increment\")","user":"anonymous","dateUpdated":"2017-03-04T22:11:46+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488655970803_-785856761","id":"20170304-203250_354437753","dateCreated":"2017-03-04T20:32:50+0100","dateStarted":"2017-03-04T22:11:41+0100","dateFinished":"2017-03-04T22:11:41+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6264"},{"title":"Log $scope to Browsers Web Console for inspection","text":"%pyspark\nsession.dumpScope()\n","user":"anonymous","dateUpdated":"2017-03-04T22:12:18+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488651184257_1909475158","id":"20170304-191304_776853471","dateCreated":"2017-03-04T19:13:04+0100","dateStarted":"2017-03-04T22:12:14+0100","dateFinished":"2017-03-04T22:12:14+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6265"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2017-03-04T22:02:37+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488661357650_-768748035","id":"20170304-220237_374359407","dateCreated":"2017-03-04T22:02:37+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6266"}],"name":"Advanced Angular for Pyspark","id":"2C9U3F8H6","angularObjects":{"2CCY719RU:shared_process":[{"name":"__zeppelin_comm_2C9U3F8H6_msg__","object":{"msg":{"function":"increment","object":{"inc":32}},"task":"call","id":9},"noteId":"2C9U3F8H6"},{"name":"myvar","object":138,"noteId":"2C9U3F8H6"},{"name":"e","object":2.71,"noteId":"2C9U3F8H6"},{"name":"__zeppelin_comm_2C9U3F8H6_status__","object":"ZeppelinSession started (do not delete this paragraph)","noteId":"2C9U3F8H6"},{"name":"pi2","object":3,"noteId":"2C9U3F8H6"},{"name":"pi","object":3.14,"noteId":"2C9U3F8H6"},{"name":"run","object":7,"noteId":"2C9U3F8H6"},{"name":"____zeppelin_comm_2C9U3F8H6_msg__","object":{"msg":{"function":"increment","object":{"inc":32}},"task":"call","id":7},"noteId":"2C9U3F8H6"}],"2C9YFNC9B:shared_process":[],"2CC8ZCHC3:shared_process":[],"2CBKE9S3V:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}