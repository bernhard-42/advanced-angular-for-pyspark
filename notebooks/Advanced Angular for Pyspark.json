{"paragraphs":[{"title":"Some helper functions","text":"%pyspark\n\ndef versionCheck():\n    import sys\n    print(\"Python: \" + sys.version.replace(\"\\n\", \" - \"))\n    print(\"Spark:  \" + sc.version)\n\ndef display(html):\n    print(\"%angular\")\n    print(html)\n\ndef getNoteId():\n    return z.z.getInterpreterContext().getNoteId()\n\ndef getParagraphId():\n    return z.z.getInterpreterContext().getParagraphId()\n\n\nversionCheck()\n","user":"anonymous","dateUpdated":"2017-03-10T16:06:06+0100","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"},"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Python: 3.5.2 |Anaconda 4.3.0 (x86_64)| (default, Jul  2 2016, 17:52:12)  - [GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)]\nSpark:  2.1.0\n"}]},"apps":[],"jobName":"paragraph_1489155283834_1643627789","id":"20170304-121836_865067366","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T16:06:06+0100","dateFinished":"2017-03-10T16:06:23+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:39551"},{"title":"Simple Angular variable binding","text":"%pyspark\n\ndisplay(\"\"\"\n\n<b>Hello {{name}} !</b>\n<div>Note Id:      <i>\"%s\"</i> (see browser address line)</div>\n<div>Paragraph Id: <i>\"%s\"</i> (see paragraph menu)</div>\n\n\"\"\" % (getNoteId(), getParagraphId()))\n\nz.z.angularBind(\"name\", \"Zeppelin\")\n","user":"anonymous","dateUpdated":"2017-03-10T16:06:25+0100","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"},"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"\n<b>Hello {{name}} !</b>\n<div>Note Id:      <i>\"2CC9PZU7B\"</i> (see browser address line)</div>\n<div>Paragraph Id: <i>\"20170304-210239_1540885795\"</i> (see paragraph menu)</div>\n\n"}]},"apps":[],"jobName":"paragraph_1489155283835_1643243040","id":"20170304-210239_1540885795","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T16:06:25+0100","dateFinished":"2017-03-10T16:06:25+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39552"},{"text":"%pyspark\n\nz.z.angularBind(\"name\", \"Apache Zeppelin\")\n","user":"anonymous","dateUpdated":"2017-03-10T16:06:28+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1489157755667_440040163","id":"20170310-155555_57806824","dateCreated":"2017-03-10T15:55:55+0100","dateStarted":"2017-03-10T16:06:28+0100","dateFinished":"2017-03-10T16:06:28+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39553"},{"title":"Trigger simple Javascript functions via DOM buttons","text":"%pyspark\n\ndisplay(\"\"\"<button id=\"abcde\" ng-click=\"run = run + 1\">Click {{run}}</button>\"\"\")\n\nz.z.angularBind(\"run\", 0)","user":"anonymous","dateUpdated":"2017-03-10T16:06:29+0100","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<button id=\"abcde\" ng-click=\"run = run + 1\">Click {{run}}</button>\n"}]},"apps":[],"jobName":"paragraph_1489155283837_1640934546","id":"20170304-122140_404002024","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T16:06:30+0100","dateFinished":"2017-03-10T16:06:30+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39554"},{"text":"%md\n## How to trigger Javascript functions: ZeppelinSession, a custom Angular watcher\n\nClicking on some DOM button is sometimes OK, however it would be great to have a way to trigger Javascript functions from Python.\n\nSo let's use the capabilities of `z.z.angularBind`, `z.z.angularUnbind` and `z.z.angular` together with `$scope.$watch` (the Angular way to trigger javascript functions based on changed variables). This is implemnted in the class ZeppelinSession.\n\nPreparation step on the machine running Zeppelin Server:\n\n```\ngit clone https://github.com/bernhard-42/advanced-angular-for-pyspark\ncd advanced-angular-for-pyspark\npip install zeppelin_session    # use the pip command of the python installation used in Zeppelin\n```","user":"anonymous","dateUpdated":"2017-03-10T15:41:47+0100","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>How to trigger Javascript functions: ZeppelinSession, a custom Angular watcher</h2>\n<p>Clicking on some DOM button is sometimes OK, however it would be great to have a way to trigger Javascript functions from Python.</p>\n<p>So let&rsquo;s use the capabilities of <code>z.z.angularBind</code>, <code>z.z.angularUnbind</code> and <code>z.z.angular</code> together with <code>$scope.$watch</code> (the Angular way to trigger javascript functions based on changed variables). This is implemnted in the class ZeppelinSession.</p>\n<p>Preparation step on the machine running Zeppelin Server:</p>\n<pre><code>git clone https://github.com/bernhard-42/advanced-angular-for-pyspark\ncd advanced-angular-for-pyspark\npip install zeppelin_session    # use the pip command of the python installation used in Zeppelin\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1489155283837_1640934546","id":"20170304-134854_1991643647","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T15:41:47+0100","dateFinished":"2017-03-10T15:41:47+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39555"},{"text":"%pyspark\nfrom zeppelin_session import ZeppelinSession\n","user":"anonymous","dateUpdated":"2017-03-10T16:06:34+0100","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1489155283839_1641704044","id":"20170304-134950_918281422","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T16:06:34+0100","dateFinished":"2017-03-10T16:06:34+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39556"},{"title":"Create a new session","text":"%pyspark\n\nsession = ZeppelinSession(z.z)\nsession.init()\n","user":"anonymous","dateUpdated":"2017-03-10T16:06:36+0100","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<div id=\"__Zeppelin_Session_2CC9PZU7B_Comm__\">{{__zeppelin_comm_2CC9PZU7B_status__}}</div>\n\n"}]},"apps":[],"jobName":"paragraph_1489155283844_1724425058","id":"20170304-135033_419842332","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T16:06:36+0100","dateFinished":"2017-03-10T16:06:36+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39557"},{"title":"Start the session (means start Angular watching)","text":"%pyspark\nsession.start()\n","user":"anonymous","dateUpdated":"2017-03-10T16:06:38+0100","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"You should now see<br><span style=\"margin:20px\"><i>ZeppelinSession started (do not delete this paragraph)</i></span></br> in the paragraph above\n\n<script>\n    var sessionCommVar = \"__zeppelin_comm_2CC9PZU7B_msg__\";\n    var sessionCommDivId = \"__Zeppelin_Session_2CC9PZU7B_Comm__\"\n    var execution_id = \"8a53d14a-0951-413e-970d-5ed7f39c5da5\";                                                 // Avoid double execution\n    if(window.__zeppelin_already_executed__ == null) {                       //\n        window.__zeppelin_already_executed__ = [];                           //\n    }                                                                        //\n    if(!window.__zeppelin_already_executed__.includes(execution_id)) {       // Avoid double execution\n\n        // Get the angular scope of the session div element\n\n        console.log(\"Get scope for div id\" + sessionCommDivId);\n        var $scope = angular.element(document.getElementById(sessionCommDivId)).scope();\n\n        // make scope easily accessible in Web Console\n\n        window.__zeppelin_comm_scope = $scope;\n\n        // Remove any remaining watcher from last session\n\n        if(typeof(window.__zeppelin_notebook_unwatchers__) !== \"undefined\") {\n            console.info(\"ZeppelinSession: Cancel watchers\");\n            var unwatchers = window.__zeppelin_notebook_unwatchers__\n            for(i in unwatchers) {\n                unwatchers[i]();\n            }\n        }\n        \n        // Array to note all active watchers (as with their respective unwatcher function)\n\n        window.__zeppelin_notebook_unwatchers__ = [];\n\n        // Main Handler\n\n        console.info(\"Install Angular watcher for session comm var \" + sessionCommVar);\n        var unwatch = $scope.$watch(sessionCommVar, function(newValue, oldValue, scope) {\n            if(typeof(newValue) !== \"undefined\") {\n                // console.info(newValue);\n                if (newValue.task === \"call\") {\n\n                    // Format: newValue = {\"id\": int, task\":\"call\", \"msg\":{\"function\":\"func_name\", \"object\":\"json_object\", \"delay\":ms}}\n                    \n                    var data = newValue.msg;\n                    console.log(\"Calling function \" + data.function + \" with delay: \" + data.delay)\n\n                    if (typeof($scope.__functions[data.function]) === \"function\") {\n                        setTimeout(function() {\n                            $scope.__functions[data.function]($scope, data.object);\n                        }, data.delay);\n                    } else {\n                        console.error(\"Unknown function: \" + data.function + \"()\")\n                    }\n                    \n                } else if (newValue.task === \"register\") {\n                    // Format: newValue = {\"id\": int, task\":\"register\", \"msg\":{\"function\":\"func_name\", \"funcBody\":\"function_as_string\"}}\n                    \n                    var data = newValue.msg;\n                    console.log(\"Registering function \" + data.function)\n                    \n                    var func = eval(data.funcBody);\n                    $scope.__functions[data.function] = func;\n                    \n                } else if (newValue.task === \"unregister\") {\n                    \n                    // Format: newValue = {\"id\": int, task\":\"unregister\", \"msg\":{\"function\":\"func_name\"}}\n                    \n                    var data = newValue.msg;\n                    console.log(\"Unregistering function \" + data.function)\n\n                    if (typeof($scope.__functions[data.function]) === \"function\") {\n                        delete $scope.__functions[data.function];\n                    }               \n                    \n                } else if (newValue.task === \"dump\") {\n                    \n                    // Format: newValue = {\"id\": int, task\":\"dump\", \"msg\":{}}\n                    \n                    console.log(\"sessionCommDivId: \", sessionCommDivId);\n                    console.log(\"$scope: \", $scope);\n\n                } else {\n\n                    // Jupyter.notebook.kernel.session.handleMsg(newValue);\n\n                    console.error(\"Unknown task: \" + newValue.task)\n                }\n            }\n        }, true)\n\n        // Initialize the object that will hold the registered functions\n        $scope.__functions = {};\n        \n        // remember unwatch function to clean up later\n        window.__zeppelin_notebook_unwatchers__.push(unwatch)\n\n        // mark init as executed\n        window.__zeppelin_already_executed__.push(execution_id);            // Avoid double execution\n    } else {                                                                //\n        console.info(\"Angular script already executed, skipped\");           //\n    }                                                                       // Avoid double execution\n</script>\n\n"}]},"apps":[],"jobName":"paragraph_1489155283845_1724040309","id":"20170304-162707_558911560","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T16:06:38+0100","dateFinished":"2017-03-10T16:06:38+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39558"},{"title":"Set and get Javascript variables from python","text":"%pyspark\nsession.setVar(\"myvar\", 10)\nsession.getVar(\"myvar\")","user":"anonymous","dateUpdated":"2017-03-10T16:06:42+0100","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"10\n"}]},"apps":[],"jobName":"paragraph_1489155283846_1725194555","id":"20170304-170415_475929524","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T16:06:42+0100","dateFinished":"2017-03-10T16:06:42+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39559"},{"text":"%md\n**Note:**\nAngular calls are async. This can't be controlled from Python, so `session.getVar` my be called \"too early\", i.e. before Angular has finished its `$apply()` call.\n\nThat's why `session.getVar` has an additional parameter `delay` (default 200ms) to give Angular a chance to finish. \n\nExample: `session.getVar(\"myvar\", 500)` for 500ms\n","user":"anonymous","dateUpdated":"2017-03-10T15:56:34+0100","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Note:</strong><br/>Angular calls are async. This can&rsquo;t be controlled from Python, so <code>session.getVar</code> my be called &ldquo;too early&rdquo;, i.e. before Angular has finished its <code>$apply()</code> call.</p>\n<p>That&rsquo;s why <code>session.getVar</code> has an additional parameter <code>delay</code> (default 200ms) to give Angular a chance to finish. </p>\n<p>Example: <code>session.getVar(&quot;myvar&quot;, 500)</code> for 500ms</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1489155283847_1724809807","id":"20170304-220418_1112986702","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T15:56:34+0100","dateFinished":"2017-03-10T15:56:34+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39560"},{"title":"Registering a javascript function","text":"%pyspark\n\njsFunc = \"\"\"\nincrement = function(session, object) {\n    session.myvar +=  object.inc\n}\n\"\"\"\nsession.registerFunction(\"increment\", jsFunc)\n","user":"anonymous","dateUpdated":"2017-03-10T16:06:45+0100","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"},"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1489155283848_1722886062","id":"20170304-171415_409342668","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T16:06:45+0100","dateFinished":"2017-03-10T16:06:45+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39561"},{"text":"%md\n**Note:**\nThe first parameter, `session`, is actually the Angular scope. So every variable `xyz` bound via `z.z.angularBind` can be accessed and changed in the function vie `session.xyz`","user":"anonymous","dateUpdated":"2017-03-10T16:02:08+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Note:</strong><br/>The first parameter, <code>session</code>, is actually the Angular scope. So every variable <code>xyz</code> bound via <code>z.z.angularBind</code> can be accessed and changed in the function vie <code>session.xyz</code></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1489157406333_859727881","id":"20170310-155006_57391036","dateCreated":"2017-03-10T15:50:06+0100","dateStarted":"2017-03-10T16:02:08+0100","dateFinished":"2017-03-10T16:02:08+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39562"},{"title":"Calling the registered function","text":"%pyspark\nsession.call(\"increment\", object={\"inc\":32})\n\nsession.getVar(\"myvar\", delay=1000) # Remember: async call above, so result might be outdated!\n","user":"anonymous","dateUpdated":"2017-03-10T16:06:48+0100","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"42\n"}]},"apps":[],"jobName":"paragraph_1489155283849_1722501313","id":"20170304-174205_174725544","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T16:06:48+0100","dateFinished":"2017-03-10T16:06:49+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39563"},{"title":"Finally unregister the function again","text":"%pyspark\n\nsession.unregisterFunction(\"increment\")\n\nsession.call(\"increment\", object={\"inc\":32}) # will now show \"Unknown function: increment()\" in the Browser Javascript Console\n","user":"anonymous","dateUpdated":"2017-03-10T16:06:52+0100","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1489155283850_1723655560","id":"20170304-203250_354437753","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T16:06:52+0100","dateFinished":"2017-03-10T16:06:52+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39564"},{"title":"Log $scope to Browsers Web Console for inspection","text":"%pyspark\nsession._dumpScope()\n","user":"anonymous","dateUpdated":"2017-03-10T16:06:55+0100","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Open the Browser Javascript Console to examine the Angular $scope that holds the Zeppelin Session\n"}]},"apps":[],"jobName":"paragraph_1489155283850_1723655560","id":"20170304-191304_776853471","dateCreated":"2017-03-10T15:14:43+0100","dateStarted":"2017-03-10T16:06:55+0100","dateFinished":"2017-03-10T16:06:55+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39565"},{"text":"%pyspark\n","dateUpdated":"2017-03-10T15:14:43+0100","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1489155283851_1723270811","id":"20170304-220237_374359407","dateCreated":"2017-03-10T15:14:43+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:39566"}],"name":"Advanced Angular for Pyspark","id":"2CC9PZU7B","angularObjects":{"2CA5R39SP:shared_process":[],"2C9PBPHP2:shared_process":[{"name":"myvar","object":42,"noteId":"2CC9PZU7B"},{"name":"name","object":"Apache Zeppelin","noteId":"2CC9PZU7B"},{"name":"__zeppelin_comm_2CC9PZU7B_status__","object":"ZeppelinSession started (do not delete this paragraph)","noteId":"2CC9PZU7B"},{"name":"run","object":3,"noteId":"2CC9PZU7B"},{"name":"__zeppelin_comm_2CC9PZU7B_msg__","object":{"msg":{},"task":"dump","id":17},"noteId":"2CC9PZU7B"}],"2C9T35AYY:shared_process":[],"2CDENW1UJ:shared_process":[],"2CA3CRS2J:shared_process":[],"2CAVHABDX:shared_process":[],"2CARY5ZYS:shared_process":[],"2CB9RSR89:shared_process":[],"2CASZNT3R:shared_process":[],"2CA4UU9ZH:shared_process":[],"2CCYSWEBF:shared_process":[],"2CA17HE2U:shared_process":[],"2CCHGTGDY:shared_process":[],"2CACZ48YM:shared_process":[],"2C9R2RW8Y:shared_process":[],"2CCZZ351R:shared_process":[],"2C9RAHG2K:shared_process":[],"2CCWBCHAT:shared_process":[],"2C9MFUCEM:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}